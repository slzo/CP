ConstPrimaryExp -> Number
ConstUnaryExp -> ConstPrimaryExp
ConstMulExp -> ConstUnaryExp
ConstAddExp -> ConstMulExp
ConstExp -> ConstAddExp
ConstArr -> [ ConstExp ]
VarDef -> Ident ConstArr
VarDefs -> VarDef
VarDef -> Ident
VarDefs -> VarDefs , VarDef
VarDecl -> int VarDefs ;
Decl -> VarDecl
BlockItem -> Decl
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
Exp -> AddExp
VarArr -> [ Exp ]
LVal -> Ident VarArr
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
Exp -> AddExp
Stmt -> LVal = Exp 
BlockItem -> BlockItem Stmt
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> AddExp + MulExp
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> AddExp + MulExp
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> AddExp + MulExp
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> AddExp + MulExp
Exp -> AddExp
InitVal -> Exp
VarDef -> Ident = InitVal
VarDefs -> VarDef
VarDecl -> int VarDefs ;
Decl -> VarDecl
BlockItem -> BlockItem Decl
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
Exp -> AddExp
InitVal -> Exp
VarDef -> Ident = InitVal
VarDefs -> VarDef
VarDecl -> int VarDefs ;
Decl -> VarDecl
BlockItem -> BlockItem Decl
LVal -> Ident
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
Exp -> AddExp
VarArr -> [ Exp ]
LVal -> Ident VarArr
PrimaryExp -> LVal
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
Exp -> AddExp
Stmt -> LVal = Exp 
BlockItem -> BlockItem Stmt
LVal -> Ident
PrimaryExp -> LVal
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
RelExp -> AddExp
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
RelExp -> RelExp > AddExp
EqExp -> RelExp
LAndExp -> EqExp
LOrExp -> LAndExp
Cond -> LOrExp
LVal -> Ident
LVal -> Ident
PrimaryExp -> LVal
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> AddExp - MulExp
Exp -> AddExp
Stmt -> LVal = Exp 
BlockItem -> Stmt
LVal -> Ident
PrimaryExp -> LVal
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
RelExp -> AddExp
EqExp -> RelExp
PrimaryExp -> Number
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
RelExp -> AddExp
EqExp -> EqExp == RelExp
LAndExp -> EqExp
LOrExp -> LAndExp
Cond -> LOrExp
Stmt -> break;
Stmt -> if (Cond) Stmt
BlockItem -> BlockItem Stmt
Stmt -> continue;
BlockItem -> BlockItem Stmt
Block -> { BlockItem }
Stmt -> Block
Stmt -> while (Cond) Stmt
BlockItem -> BlockItem Stmt
LVal -> Ident
PrimaryExp -> LVal
UnaryExp -> PrimaryExp
MulExp -> UnaryExp
AddExp -> MulExp
Exp -> AddExp
Stmt -> return Exp;
BlockItem -> BlockItem Stmt
Block -> { BlockItem }
FuncDef -> int Ident () Block
CompUnit -> FuncDef
